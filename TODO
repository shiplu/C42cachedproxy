
Process
-------
Each HTTP call to external api should be cached for 4.2 minutes (252 seconds).
After 4.2 minutes successive calls will maintain If-Modified-Since and If-None-Match header.
If we get new responose then cache it. If not then extend the time of cache by
4.2 minutes. Instead of extending the external api can be called again to get the latest content.
This will save some bandwidth as there may not be updated content. But it'll add latency. 


Caching External API
--------------------
To make the server horizontally scalable we need a distributed cache server.
To save the computation time we can directly save the parsed external api response.
Usually the api will provide response as json text. The json is parsed to dictionary.
Then only the data required for client's response should be kept in the cache server.
Redis will be better choice as every entity we save is a response of an api with some
timing information with it. Like Last-modified, Etag etc.


Caching Client
--------------
There should be necessary headers so that client can cache it properly.
Dont make it too complex.


Configuration Server
--------------------
All the configuration should be loaded from consul server. If server is not reachable or
not provided it'll fall back to config.ini file. The path to config.ini should be /etc/cachedproxy,
project directory where its found first.


Tests
-----
The code is written tests in mind. So they are testable. All we need is to add tests.

Configuration
-------------
We are mainly reading config from either config.ini or from consul server.
But we are also reading some values from command line. We should only use the command line config when the config is necessary to start the app. Like consul server address